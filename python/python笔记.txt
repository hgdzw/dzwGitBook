input(“提示信息”)	输入数字
raw_input（“提示信息”）	将所有的输入当成字符串看待

.strip()	去除首尾字符 默认为空格

python中format函数用于字符串的格式化‘dasd{}dasd’.format(1)   就把1 放进去了
class D(A)
	super（D，self）._init_()		先调用父类的_init_方法

print 和format 填充的使用
	print("这是一个{0}字符{1}串".fromat(0,1))
lambda 函数  在需要一个函数，但是又不想费神去命名一个函数的场合下使用，也就是指匿名函数。
    函数名 = lambda 参数列表： 表达式
	经常结合map（）使用
map(f,[])   传入一个函数和list      结合 lambda    map(lambda x:x**2,[1,3,5])	   输出的就是1,9,25
range range(1,5) #代表从1到5(不包含5)
turtle 库  绘制图形
	turtle.forward(distance)
	向当前画笔方向移动distance像素长度
	turtle.right(degree)
	顺时针移动degree°
	更新找	http://blog.csdn.net/zengxiantao1994/article/details/76588580

1	list.append(obj)
在列表末尾添加新的对象
2	list.count(obj)
统计某个元素在列表中出现的次数
3	list.extend(seq)
在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）
4	list.index(obj)
从列表中找出某个值第一个匹配项的索引位置
5	list.insert(index, obj)
将对象插入列表
6	list.pop(obj=list[-1])
移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
7	list.remove(obj)
移除列表中某个值的第一个匹配项
8	list.reverse()
反向列表中元素
9	list.sort([func])
对原列表进行排序

enumerate 函数就是把列表中的数值前面加一个数字输出 例：{（0，x1）,(1,x2)...}

zip()函数 将对应的元素打包成一个元组
	元组的元素不能修改 如果想修改可以转换成字典或者其他例如
	dict（zip(x1,x2)）
	将两个列表变成一个列表
	x = zip(x1,x2)		例如[(1, 6), (2, 7), (3, 8), (4, 9)]
	然后进行解包  x,y = zip(*x)




字典的知识
	遍历一个字典的话   	for i,j in 字典.items()			遍历值  for i in 字典.values()
	字典中增加对应的字符串
	dict = {}
	dict[x] = y
	dict  会变成   dict{x:y}

数据可视化 matplotlib 模块



json文件格式  例如{
    "name": "中国",
    "province": [{
        "name": "黑龙江",
        "cities": {
            "city": ["哈尔滨", "大庆"]
        }


		json 文件中的load（） 可以把json文件转化为字典

csv 文件格式	name，province，name，cities，city
		中国，[{，黑龙江，{，["哈尔滨", "大庆"]

		1，包含逗号, 双引号, 或是换行符的字段必须放在引号内.
		2，字段内部的引号必须在其前面增加一个引号来实现文字引号的转码.
	csv.read()	csv.writr()	csv 的读写操作
strip()   对前置字符串进行处理 去头去尾  括号中是什么就去什么 默认去空格

beautifulSoup  处理网页文件的 比正则好用多了
	首先创建一个beautifulsoup对象   bs = beautifulsoup(url,‘解析器（lxml）’，编码方式默认一样)
				然后	bs.find_all("    ")

数据处理：
numpy  用python实现的科学技术库
	1.n维数组对象，线性代数 多为数组
	2.矩阵的运算
pandas 分析结构化数据  是一维数据
	ser_obj = pd.series()  左边自动生成索引  右边数据
	对ser_obj 进行处理有
	index（这是索引）	value（值）  ser_obj[值]		head（值）

	.str.  函数    向量化字符串操作


传智播客中类库的引用
	首先是cookielib库中的引用   cookie存放主要有几个容器存放
		CookieJar，FileCookieJar，MozillaCookieJar,LWPCookieJar。

openner
	基本的程序是
		import cookielib
		cookiejar = cookielib.cookiejar() 生成存储器对象
		cookie = urllib2.HTTPCookieProcessor(cookiejar)
		openner = urllib2.build_opener(cookie)   把这个存储器绑定到opener 对象中

	基本的urlopen()函数不支持验证、cookie或其他HTTP高级功能。要支持这些功能，必须使用  build_opener()  函数来创建自己的自定义Opener对象
	有install_opener()，build_opener(), 将不同的参数放到里面
	如果你请求两个不同的网页 程序不会一起访问 当成两次访问 而你用openner.open()访问的时候只要是cookie都会保存在里面 当成一次访问

	

